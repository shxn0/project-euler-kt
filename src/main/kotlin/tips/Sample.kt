package tips

class Sample

/**
 * Problem 5 最小の倍数  OK
 *
 * 2520 は 1 から 10 の数字の全ての整数で割り切れる数字であり, そのような数字の中では最小の値である.
 * では, 1 から 20 までの整数全てで割り切れる数字の中で最小の正の数はいくらになるか.
 *
 * 正解: 232792560
 */
//fun main(args: Array<String>) {
//
// // 順番に最小公倍数を求める。
// // ansに計算結果を代入していき、全ての数字の最小公倍数が、全ての整数で割り切れる最小の正の数になる。
//  var ans = 1L
//  val ec = Euclid()
//
//    for (i in 2L..20) {
//      ans = ec.lcm(ans, i)
//    }
//
//  println(ans)
//
//}

/**
 * Problem 14 最長のコラッツ数列 OK
 *
 * 正の整数に以下の式で繰り返し生成する数列を定義する.
 *
 * n → n/2 (n が偶数)
 * n → 3n + 1 (n が奇数)
 *
 * nが13からはじめると、ｎは奇数なので、3n+1で40となる。そのように計算すると、この数列は以下のようになる.
 *
 * 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
 * 13から1まで10個の項になる. この数列はどのような数字からはじめても最終的には 1 になると考えられているが, まだそのことは証明されていない(コラッツ問題)
 *
 * さて, 100万未満の数字の中で、どのようなnからはじめれば最長の数列を生成するか.
 * 注意: 数列の途中で100万以上になってもよい
 *
 * 正解: 837799
 *
 */

//fun main(args: Array<String>) {
//  var memo = listOf<Long>()  // 一番長いコラッツ数列を格納する
//
//  // 100万未満なので↓の数字
//  for (i in 1L..999999) {
//    val czList = Collatz(i).exec()
//
//    if(memo.size < czList.size) {
//      memo = czList
//    }
//  }
//  println("最長のコラッツ数列: $memo")
//  println("初期値: ${memo.first()}")
//  println("数列の長さ: ${memo.size}")
//
//}


/**
 * Problem 8 数字列中の最大の積 TODO あとでやる
 *
 * 次の1000桁の数字のうち, 隣接する4つの数字の総乗の中で, 最大となる値は, 9 × 9 × 8 × 9 = 5832である
 * 73167176531330624919225119674426574742355349194934
 * 96983520312774506326239578318016984801869478851843
 * 85861560789112949495459501737958331952853208805511
 * 12540698747158523863050715693290963295227443043557
 * 66896648950445244523161731856403098711121722383113
 * 62229893423380308135336276614282806444486645238749
 * 30358907296290491560440772390713810515859307960866
 * 70172427121883998797908792274921901699720888093776
 * 65727333001053367881220235421809751254540594752243
 * 52584907711670556013604839586446706324415722155397
 * 53697817977846174064955149290862569321978468622482
 * 83972241375657056057490261407972968652414535100474
 * 82166370484403199890008895243450658541227588666881
 * 16427171479924442928230863465674813919123162824586
 * 17866458359124566529476545682848912883142607690042
 * 24219022671055626321111109370544217506941658960408
 * 07198403850962455444362981230987879927244284909188
 * 84580156166097919133875499200524063689912560717606
 * 05886116467109405077541002256983155200055935729725
 * 71636269561882670428252483600823257530420752963450
 *
 * この1000桁の数字から13個の連続する数字を取り出して, それらの総乗を計算する. では、それら総乗のうち、最大となる値はいくらか.
 *
 * EX 6桁の数123789から5個の連続する数字を取り出す場合, 1*2*3*7*8と2*3*7*8*9の二通りとなり, 後者の2*3*7*8*9=3024が最大の総乗となる.
 *
 * 正解: 23514624000
 */

//fun main(args: Array<String>) {
//
//  val str = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
//
//  // n桁で区切った数字のリスト [7316, 3167, 1671]
//  val numberList = mutableListOf<String>()
//
//  var n = 0
//  while (n < str.length - 12) {
//    val unit = str.substring(n, n + 13)
//    numberList.add(unit)
//    n += 1
//  }
//
//  // n桁の整数を1桁ずつ分割したものを二次元配列で保持
//  // [[7, 3, 1, 6], [3, 1, 6, 7], [1, 6, 7, 1]]
//  val numbers = numberList.map {
//    it.split("").drop(1).dropLast(1)
//  }
//
//  val calculatedList = numbers.map { lump ->
//    // 要素に対して再帰的に関数を適用して一つの値にまとめる
//    lump.map { num -> num.toLong() }.reduce { acc, l -> acc * l }
//  }
//
//  val ans = calculatedList.sortedByDescending { it }.first()
//
//  println("n桁区切りの整数: $numberList")
//  println("n桁を分解した総乗の計算結果: $calculatedList")
//  println("最大値: $ans")
//
//}

//fun main(args: Array<String>) {
//
//  val str = "1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989"
//  val numberList = mutableListOf<String>()
//
////  val r = str.substring(35)
//
//  var n = 0
//
//  while (n < str.length - 4) {
//    val unit = str.substring(n, n + 5)
//    numberList.add(unit)
//    n += 1
//  }
//
//  val numberList2 = numberList.map { it.toLong() }
//
//  val res = mutableListOf<Long>()
//
//  for (i in 1L..99999) {
//    for (n in numberList2) {
//      if(n == i * i) {
//        res.add(n)
//      }
//    }
//  }
//
//  println(numberList2)
//  println(res)
//
//}


/**
 * 各桁の5乗  OK
 * 驚くべきことに, 各桁を4乗した数の和が元の数と一致する数は3つしかない.
 *
 * 1634 = 1^4 + 6^4 + 3^4 + 4^4
 * 8208 = 8^4 + 2^4 + 0^4 + 8^4
 * 9474 = 9^4 + 4^4 + 7^4 + 4^4
 *
 * ただし, 1=1^4は含まないものとする.
 * この数たちの和は 1634 + 8208 + 9474 = 19316 である.
 *
 *
 * 各桁を5乗した数の和が元の数と一致するような数の総和を求めよ.
 *
 * 正解: 443839
 *
 */

//fun main(args: Array<String>) {
//  var result: Long = 0
//  val MAX: Long = 999999 // 5乗の場合は6桁の9で回す
//
//  for (i in 2L..MAX){
//    val digitList = i.toString().split("").drop(1).dropLast(1) // 1桁をリストにする
//    val sum = digitList.map { it.toDouble().pow(5.0) }.sum().toLong()
//
//    if(i == sum) result += sum
//  }
//  println(result)
//}

/**
 * Problem 7 10001番目の素数 OK
 * 素数を小さい方から6つ並べると 2, 3, 5, 7, 11, 13 であり, 6番目の素数は 13 である.
 *
 * 10,001 番目の素数を求めよ.
 *
 * 正解: 104743
 *
 */

//fun main(args: Array<String>) {
//  val pnList = mutableListOf<Long>()
//  val pn = PrimeNumber()
//
//  var i = 2L
//  while (pnList.size < 10001) {
//    if (pn.isPrime(i)) {
//      pnList.add(i)
//    }
//    i += 1
//  }
//  println(pnList)
//  println("n番目の素数: ${pnList.takeLast(1)}")
//}

/**
 * Problem 10 素数の和 OK
 * 10以下の素数の和は 2 + 3 + 5 + 7 = 17 である.
 * 200万以下の全ての素数の和を求めよ.
 *
 *  正解: 142913828922
 */

//fun main(args: Array<String>){
//  val primeList = mutableListOf<Long>()
//  val pn = PrimeNumber()
//
//  for(n in 2L..2000000) {
//    if(pn.isPrime(n)) {
//      primeList.add(n)
//    }
//  }
//
//  val ans = primeList.sum()
////  println(primeList)
//  println(ans)
//}

/**
 * Problem 3 最大の素因数 OK
 *
 * 数学における自然数の約数になる素数のことである。
 *
 * 13195 の素因数は 5, 7, 13, 29 である.
 * 600851475143 の素因数のうち最大のものを求めよ.
 *
 * 正解: 6857
 */

//fun main(args: Array<String>) {
//  val f = Factor()
//
//  val n = 600851475143L
//  val ans = f.factor(n)
//  println(ans)
//}


// FIXME before
//fun main(args: Array<String>) {
//  val pnList = mutableListOf<Long>()  // 数字(n)の素数を入れるリスト
//  val numList = mutableListOf<Long>() // 数字(n)を割り切れた素数のリスト
//  val factorList = mutableListOf<Long>() // 素因数を入れるリスト
//
//  val pn = PrimeNumber()
//  val num: Long = 600851475143
//
//  // 数字nの半分の数字までで素数を出す
//  for (i in 2L..num) {
//    if (i * i > num) break
//    if (pn.isPrime(i)) {
//      pnList.add(i)
//    }
//    println(i)
//  }
//
//  var n = num  // 最初の値(13195)をnに代入する
//  pnList.forEach { p ->
//    while (n % p == 0L) n /= p // 最初の値(n)を素数(p)で割り続けられるまで割る
//    if (n == 1L) numList.add(p)  // 割り切れるまで割って最後に1になればその素数は数字(n)の倍数となる
//  }
//
//  // 素数リストと素数の中から割り切れたリストを差し引いて、素数の中から割り切れたリスト(numList)の最初の素数を追加して回答素数リストを作る
//  val ansList = (pnList - numList).plus(numList.take(1)) //
//
//  var x = num
//  ansList.forEach { an ->
//    if(x % an == 0L) factorList.add(an)  // 回答リストの中からあまりが0のものが素因数
//  }
//
//  println("素数リスト: $pnList")
//  println("素数で割り切れたリスト: $numList")
//  println("回答素数リスト: $ansList")
//  println("素因数: $factorList")
//  println("最後の数: ${factorList.takeLast(1)}")
//
//}

/**
 * Problem 4 最大の回文積  OK
 * 左右どちらから読んでも同じ値になる数を回文数という. 2桁の数の積で表される回文数のうち, 最大のものは 9009 = 91 × 99 である.
 * では, 3桁の数の積で表される回文数の最大値を求めよ.
 *
 * 正解:  906609
 */

//fun main(args: Array<String>) {
//  val numList = mutableListOf<Long>()
//
//  for(a in 100..999L) {
//    for (b in 100..999L) {
//      val num = a*b
//      // 回文数の場合はリストに追加
//      if(num.toString().reversed() == num.toString()) numList.add(num)
//    }
//  }
//  val ans = numList.maxByOrNull { it }
//
//  println(numList)
//  println(ans)
//}

/**
 * Problem 9 特別なピタゴラス数 OK
 *
 * （直角三角形の3辺の長さとなるような3つの整数の組のこと）
 * ピタゴラス数(ピタゴラスの定理を満たす自然数)とは a < b < c で以下の式を満たす数の組である.
 *
 * a^2 + b^2 = c^2 （2は指数）
 *
 * 例えば, 3^2 + 4^2 = 9 + 16 = 25 = 5^2 である.
 * a + b + c = 1000 となるピタゴラスの三つ組が一つだけ存在する.
 *
 * これらの積 abc を計算しなさい.
 *
 * 正解: 31875000
 */
//fun main(args: Array<String>) {
//  val pyg = PythagorasNumbers()
//
//  for (m in 1L..1000) {
//    for (n in 1L..m) {
//      val (a, b, c) = pyg.exec(m, n)
//      if(a + b + c == 1000L){
//        println("A:$a, B:$b, C:$c")
//        println("積: ${a * b * c}")
//        return
//      }
//    }
//  }
//}

/**
 *
 * 大きな数の足し算 OK
 * 以下の50桁の数字100個の合計の上から10桁を求めなさい。
 *
 *
37107287533902102798797998220837590246510135740250
46376937677490009712648124896970078050417018260538
74324986199524741059474233309513058123726617309629
91942213363574161572522430563301811072406154908250
23067588207539346171171980310421047513778063246676
89261670696623633820136378418383684178734361726757
28112879812849979408065481931592621691275889832738
44274228917432520321923589422876796487670272189318
47451445736001306439091167216856844588711603153276
70386486105843025439939619828917593665686757934951
62176457141856560629502157223196586755079324193331
64906352462741904929101432445813822663347944758178
92575867718337217661963751590579239728245598838407
58203565325359399008402633568948830189458628227828
80181199384826282014278194139940567587151170094390
35398664372827112653829987240784473053190104293586
86515506006295864861532075273371959191420517255829
71693888707715466499115593487603532921714970056938
54370070576826684624621495650076471787294438377604
53282654108756828443191190634694037855217779295145
36123272525000296071075082563815656710885258350721
45876576172410976447339110607218265236877223636045
17423706905851860660448207621209813287860733969412
81142660418086830619328460811191061556940512689692
51934325451728388641918047049293215058642563049483
62467221648435076201727918039944693004732956340691
15732444386908125794514089057706229429197107928209
55037687525678773091862540744969844508330393682126
18336384825330154686196124348767681297534375946515
80386287592878490201521685554828717201219257766954
78182833757993103614740356856449095527097864797581
16726320100436897842553539920931837441497806860984
48403098129077791799088218795327364475675590848030
87086987551392711854517078544161852424320693150332
59959406895756536782107074926966537676326235447210
69793950679652694742597709739166693763042633987085
41052684708299085211399427365734116182760315001271
65378607361501080857009149939512557028198746004375
35829035317434717326932123578154982629742552737307
94953759765105305946966067683156574377167401875275
88902802571733229619176668713819931811048770190271
25267680276078003013678680992525463401061632866526
36270218540497705585629946580636237993140746255962
24074486908231174977792365466257246923322810917141
91430288197103288597806669760892938638285025333403
34413065578016127815921815005561868836468420090470
23053081172816430487623791969842487255036638784583
11487696932154902810424020138335124462181441773470
63783299490636259666498587618221225225512486764533
67720186971698544312419572409913959008952310058822
95548255300263520781532296796249481641953868218774
76085327132285723110424803456124867697064507995236
37774242535411291684276865538926205024910326572967
23701913275725675285653248258265463092207058596522
29798860272258331913126375147341994889534765745501
18495701454879288984856827726077713721403798879715
38298203783031473527721580348144513491373226651381
34829543829199918180278916522431027392251122869539
40957953066405232632538044100059654939159879593635
29746152185502371307642255121183693803580388584903
41698116222072977186158236678424689157993532961922
62467957194401269043877107275048102390895523597457
23189706772547915061505504953922979530901129967519
86188088225875314529584099251203829009407770775672
11306739708304724483816533873502340845647058077308
82959174767140363198008187129011875491310547126581
97623331044818386269515456334926366572897563400500
42846280183517070527831839425882145521227251250327
55121603546981200581762165212827652751691296897789
32238195734329339946437501907836945765883352399886
75506164965184775180738168837861091527357929701337
62177842752192623401942399639168044983993173312731
32924185707147349566916674687634660915035914677504
99518671430235219628894890102423325116913619626622
73267460800591547471830798392868535206946944540724
76841822524674417161514036427982273348055556214818
97142617910342598647204516893989422179826088076852
87783646182799346313767754307809363333018982642090
10848802521674670883215120185883543223812876952786
71329612474782464538636993009049310363619763878039
62184073572399794223406235393808339651327408011116
66627891981488087797941876876144230030984490851411
60661826293682836764744779239180335110989069790714
85786944089552990653640447425576083659976645795096
66024396409905389607120198219976047599490197230297
64913982680032973156037120041377903785566085089252
16730939319872750275468906903707539413042652315011
94809377245048795150954100921645863754710598436791
78639167021187492431995700641917969777599028300699
15368713711936614952811305876380278410754449733078
40789923115535562561142322423255033685442488917353
44889911501440648020369068063960672322193204149535
41503128880339536053299340368006977710650566631954
81234880673210146739058568557934581403627822703280
82616570773948327592232845941706525094512325230608
22918802058777319719839450180888072429661980811197
77158542502016545090413245809786882778948721859617
72107838435069186155435662884062257473692284509516
20849603980134001723930671666823555245252804609722
53503534226472524250874054075591789781264330331690

正解: 5537376230
 */
//fun main(args: Array<String>) {
//
//  val str = "37107287533902102798797998220837590246510135740250\n" +
//    "46376937677490009712648124896970078050417018260538\n" +
//    "74324986199524741059474233309513058123726617309629\n" +
//    "91942213363574161572522430563301811072406154908250\n" +
//    "23067588207539346171171980310421047513778063246676\n" +
//    "89261670696623633820136378418383684178734361726757\n" +
//    "28112879812849979408065481931592621691275889832738\n" +
//    "44274228917432520321923589422876796487670272189318\n" +
//    "47451445736001306439091167216856844588711603153276\n" +
//    "70386486105843025439939619828917593665686757934951\n" +
//    "62176457141856560629502157223196586755079324193331\n" +
//    "64906352462741904929101432445813822663347944758178\n" +
//    "92575867718337217661963751590579239728245598838407\n" +
//    "58203565325359399008402633568948830189458628227828\n" +
//    "80181199384826282014278194139940567587151170094390\n" +
//    "35398664372827112653829987240784473053190104293586\n" +
//    "86515506006295864861532075273371959191420517255829\n" +
//    "71693888707715466499115593487603532921714970056938\n" +
//    "54370070576826684624621495650076471787294438377604\n" +
//    "53282654108756828443191190634694037855217779295145\n" +
//    "36123272525000296071075082563815656710885258350721\n" +
//    "45876576172410976447339110607218265236877223636045\n" +
//    "17423706905851860660448207621209813287860733969412\n" +
//    "81142660418086830619328460811191061556940512689692\n" +
//    "51934325451728388641918047049293215058642563049483\n" +
//    "62467221648435076201727918039944693004732956340691\n" +
//    "15732444386908125794514089057706229429197107928209\n" +
//    "55037687525678773091862540744969844508330393682126\n" +
//    "18336384825330154686196124348767681297534375946515\n" +
//    "80386287592878490201521685554828717201219257766954\n" +
//    "78182833757993103614740356856449095527097864797581\n" +
//    "16726320100436897842553539920931837441497806860984\n" +
//    "48403098129077791799088218795327364475675590848030\n" +
//    "87086987551392711854517078544161852424320693150332\n" +
//    "59959406895756536782107074926966537676326235447210\n" +
//    "69793950679652694742597709739166693763042633987085\n" +
//    "41052684708299085211399427365734116182760315001271\n" +
//    "65378607361501080857009149939512557028198746004375\n" +
//    "35829035317434717326932123578154982629742552737307\n" +
//    "94953759765105305946966067683156574377167401875275\n" +
//    "88902802571733229619176668713819931811048770190271\n" +
//    "25267680276078003013678680992525463401061632866526\n" +
//    "36270218540497705585629946580636237993140746255962\n" +
//    "24074486908231174977792365466257246923322810917141\n" +
//    "91430288197103288597806669760892938638285025333403\n" +
//    "34413065578016127815921815005561868836468420090470\n" +
//    "23053081172816430487623791969842487255036638784583\n" +
//    "11487696932154902810424020138335124462181441773470\n" +
//    "63783299490636259666498587618221225225512486764533\n" +
//    "67720186971698544312419572409913959008952310058822\n" +
//    "95548255300263520781532296796249481641953868218774\n" +
//    "76085327132285723110424803456124867697064507995236\n" +
//    "37774242535411291684276865538926205024910326572967\n" +
//    "23701913275725675285653248258265463092207058596522\n" +
//    "29798860272258331913126375147341994889534765745501\n" +
//    "18495701454879288984856827726077713721403798879715\n" +
//    "38298203783031473527721580348144513491373226651381\n" +
//    "34829543829199918180278916522431027392251122869539\n" +
//    "40957953066405232632538044100059654939159879593635\n" +
//    "29746152185502371307642255121183693803580388584903\n" +
//    "41698116222072977186158236678424689157993532961922\n" +
//    "62467957194401269043877107275048102390895523597457\n" +
//    "23189706772547915061505504953922979530901129967519\n" +
//    "86188088225875314529584099251203829009407770775672\n" +
//    "11306739708304724483816533873502340845647058077308\n" +
//    "82959174767140363198008187129011875491310547126581\n" +
//    "97623331044818386269515456334926366572897563400500\n" +
//    "42846280183517070527831839425882145521227251250327\n" +
//    "55121603546981200581762165212827652751691296897789\n" +
//    "32238195734329339946437501907836945765883352399886\n" +
//    "75506164965184775180738168837861091527357929701337\n" +
//    "62177842752192623401942399639168044983993173312731\n" +
//    "32924185707147349566916674687634660915035914677504\n" +
//    "99518671430235219628894890102423325116913619626622\n" +
//    "73267460800591547471830798392868535206946944540724\n" +
//    "76841822524674417161514036427982273348055556214818\n" +
//    "97142617910342598647204516893989422179826088076852\n" +
//    "87783646182799346313767754307809363333018982642090\n" +
//    "10848802521674670883215120185883543223812876952786\n" +
//    "71329612474782464538636993009049310363619763878039\n" +
//    "62184073572399794223406235393808339651327408011116\n" +
//    "66627891981488087797941876876144230030984490851411\n" +
//    "60661826293682836764744779239180335110989069790714\n" +
//    "85786944089552990653640447425576083659976645795096\n" +
//    "66024396409905389607120198219976047599490197230297\n" +
//    "64913982680032973156037120041377903785566085089252\n" +
//    "16730939319872750275468906903707539413042652315011\n" +
//    "94809377245048795150954100921645863754710598436791\n" +
//    "78639167021187492431995700641917969777599028300699\n" +
//    "15368713711936614952811305876380278410754449733078\n" +
//    "40789923115535562561142322423255033685442488917353\n" +
//    "44889911501440648020369068063960672322193204149535\n" +
//    "41503128880339536053299340368006977710650566631954\n" +
//    "81234880673210146739058568557934581403627822703280\n" +
//    "82616570773948327592232845941706525094512325230608\n" +
//    "22918802058777319719839450180888072429661980811197\n" +
//    "77158542502016545090413245809786882778948721859617\n" +
//    "72107838435069186155435662884062257473692284509516\n" +
//    "20849603980134001723930671666823555245252804609722\n" +
//    "53503534226472524250874054075591789781264330331690"
//
//  val list = str.split("\n")
//  val numList = list.map { BigDecimal(it) }
//  val sum = numList.reduce { acc, l -> acc + l }
//  val ans = sum.toString().substring(0, 10)
//
//  println(sum)
//  println(ans)
//}

/**
 *
 * Problem 20 各位の数字の和 2  OK
 *
 * n × (n - 1) × ... × 3 × 2 × 1 を n! と表す.
 *
 * 例えば, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800 となる.
 * この数の各桁の合計は 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27 である.
 *
 * では, 100! の各位の数字の和を求めよ.
 *
 * 正解: 648
 *
 */
//fun main(args: Array<String>){
//  val list = (1..100).toList().map { BigDecimal(it) }
//  val num = list.reduce { acc, i -> acc * i }
//  val ans = PositiveNumber(num).divide().sum()
//  println(ans)
//}

/**
 * Problem 1 3と5の倍数
 *
 * 10未満の自然数のうち, 3 もしくは 5 の倍数になっているものは 3, 5, 6, 9 の4つがあり, これらの合計は 23 になる.
 *
 * 同じようにして, 1000 未満の 3 か 5 の倍数になっている数字の合計を求めよ.
 *
 * 正解: 233168
 */

//fun main(args: Array<String>) {
//  val resList = mutableListOf<Long>()
//
//  for (i in 1..999L) {
//
//    if (i % 3 == 0L) {
//      resList.add(i)
//      continue
//    }
//
//    if (i % 5 == 0L) {
//      resList.add(i)
//      continue
//    }
//  }
//
//  val ans = resList.sum()
//  println("3か5の倍数のリスト: $resList")
//  println("リストの合計値: $ans")
//}

/**
 *
 * Problem 2 偶数のフィボナッチ数 TODO 再度確認 BigDecimalの割り算とisZeroを確認
 * フィボナッチ数列の項は前の2つの項の和である. 最初の2項を 1, 2 とすれば, 最初の10項は以下の通りである.
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 数列の項の値が400万以下のとき, 値が偶数の項の総和を求めよ.
 *
 * 正解: 4613732
 *
 */

//fun main(args: Array<String>) {
//  val f = Fibonacci()
//  val fibList = f.fibByMaxNum(max = 4000000L)
//
//  val ansList = fibList.filter { n -> (n % BigDecimal(2)).isZero() }
//  val ans = ansList.sum()
//
//  println("フィボナッチ数列: $fibList")
//  println("偶数だけの数列: $ansList")
//  println("総和: $ans")
//}

/**  OK
 * フィボナッチ数列は以下の漸化式で定義される:
 * Fn = Fn−1 + Fn−2, ただし F1 = 1 and F2 = 1.
 * 最初の12項は以下である.
 * F1 = 1
 * F2 = 1
 * F3 = 2
 * F4 = 3
 * F5 = 5
 * F6 = 8
 * F7 = 13
 * F8 = 21
 * F9 = 34
 * F10 = 55
 * F11 = 89
 * F12 = 144
 * 12番目の項,
 * F12
 * が3桁になる最初の項である.
 * 1000桁になる最初の項の番号を答えよ.
 *
 *
 *
 */

//fun main(args: Array<String>) {
//  val fi = Fibonacci()
//  val fibList = fi.fibByDigits(1000L)
//
//  println("フィボナッチ数列: $fibList")
////  println("後ろから10項: ${fibList.takeLast(10)}")
//  println("最初の項: ${fibList.takeLast(1)}")
//  println("数列の長さ: ${fibList.size}")
//}

/**
 * Problem 6 二乗和の差
 * 最初の10個の自然数について, その二乗の和は,
 *
 * 12 + 22 + ... + 102 = 385
 *
 * 最初の10個の自然数について, その和の二乗は,
 *
 *(1 + 2 + ... + 10)2 = 3025
 *
 * これらの数の差は 3025 - 385 = 2640 となる.
 *
 * 同様にして, 最初の100個の自然数について二乗の和と和の二乗の差を求めよ.
 */

//fun main(args: Array<String>) {
//  val sL = (1L..100).map { BigDecimal(it).pow(2) }.sum()
//  val mL = BigDecimal((1L..100).sum()).pow(2)
//
//  println(sL)
//  println(mL)
//  println(mL - sL)
//}

/**
 * 個別のべき乗 TODO 再確認
 * 2 ≤ a ≤ 5 と 2 ≤ b ≤ 5について, ab を全て考えてみよう:
 *
 * 2^2=4, 2^3=8, 2^4=16, 2^5=32
 * 3^2=9, 3^3=27, 3^4=81, 3^5=243
 * 4^2=16, 4^3=64, 4^4=256, 4^5=1024
 * 5^2=25, 5^3=125, 5^4=625, 5^5=3125
 *
 * これらを小さい順に並べ, 同じ数を除いたとすると, 15個の項を得る：
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 * 2 ≤ a ≤ 100, 2 ≤ b ≤ 100 で同じことをしたときいくつの異なる項が存在するか?
 *
 */

//fun main(args: Array<String>) {
//
//  val list = (2..100).toList().map { BigDecimal(it) }
//  val ansList = mutableSetOf<BigDecimal>()
//
//  for (n in list) {
//    for (m in list) {
//      ansList.add(n.pow(m.toInt()))
//    }
//  }
//
//  val res = ansList.sorted()
//  println("リスト: $res")
//  println("項の数: ${res.size}")
//
//}


/**
 * Problem 16 各位の数字の和 OK
 * 2の15乗=32768であり、これの各数字の合計は 3+2+7+6+8=26となる。
 * 同様にして、2の1000乗の各数字の合計を求めよ。
 *
 * 正解: 1366
 */

//fun main(args: Array<String>) {
//  val n = BigDecimal(2).pow(1000)
//  val ans = PositiveNumber(n).divide().sum()
//
//  println(n)
//  println(ans)
//}

/**
 *
 * 名前のスコア TODO もう一度やる
 * 5000個以上の名前が書かれている46Kのテキストファイルを用いる. まずアルファベット順にソートせよ.
 * のち, 各名前についてアルファベットに値を割り振り（A=1, B =2....）, リスト中の出現順の数と掛け合わせることで, 名前のスコアを計算する.
 *
 * たとえば, リストがアルファベット順にソートされているとすると, COLINはリストの938番目にある. またCOLINは 3 + 15 + 12 + 9 + 14 = 53 という値を持つ. よってCOLINは 938 × 53 = 49714 というスコアを持つ.
 *
 * ファイル中の全名前のスコアの合計を求めよ.
 *
 * 正解: 871198282
 *
 */

//fun main(args: Array<String>) {
//
//  val fileName = "src/main/resources/file/text.txt"
//  val text = File(fileName).readText()
//// println(text)
//
//  val names = text.split(",").sorted()
////  println(names)
//
//  names.forEachIndexed { index, s ->
//    if (s == "\"COLIN\"") println("${index + 1}: $s")
//  }
//
//  val alphabets = ('A'..'Z').toList().mapIndexed { index, c ->
//    c to index + 1
//  }.toMap()
//
//  val r = names.mapIndexed { index, name ->
//    (index + 1) * name.mapIndexed { index, c -> alphabets[c] ?: 0 }.sum()
//  }.sum()
//
//  println(alphabets)
//  println(r)
//}


// TODO これがTakiコード
//fun main(args: Array<String>) {
//
//  val alpScoreList = ('A'..'Z').toList().mapIndexed { index, c ->
//    c to (index + 1)
//  }.toMap()
//
//  val fileName = "src/main/resources/file/text.txt"
//  val text = File(fileName).readText()
//  println(text)
//
//  val names = text.split(",").sorted()
//  val ans = names.mapIndexed { index, name ->
//    (index + 1) * name.map { char -> alpScoreList[char] ?: 0 }.sum()
//  }.sum()
//
//  println(alpScoreList)
//  println(names)
//  println(ans)
//}

/**
Problem 12 高度整除三角数

三角数の数列は自然数の和で表わされ, 7番目の三角数は 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28 である.

三角数の最初の10項は:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ... となる.

最初の7項について, その約数を列挙すると, 以下のとおり.

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

これから, 7番目の三角数である28は, 5個より多く約数をもつ最初の三角数であることが分かる.

では, 500個より多く約数をもつ最初の三角数はいくつか.

第n項の三角数は
n（n＋1）÷2

答え 76576500

 */

//fun main(args: Array<String>) {
//  val tr = TripleNumber()
//
//  var ans = 0L
//
//  var len = 0
//  var n = 1L
//  var res = mutableListOf<Long>()
//  while (len < 500) {
//    val list = mutableListOf<Long>()
//    val num = tr.exec(n)
//
//    for (i in 1L..num/2) {
//      if(num % i == 0L) {
//        list.add(i)
//      }
//    }
//    res = list
//    len = list.size
//    n++
//  }
//
//  println(res)
//  println(res.sum())
//  println(len)
//
//}

//fun main(args: Array<String>) {
//
//  val tr = TripleNumber()
//  val trList = mutableListOf<MutableList<Long>>()
//  var res = mutableListOf<Long>()
//  var count = 0
//
//  while (count < 5) {
//
//    for (n in 3L..7) {
//      val list = mutableListOf<Long>()
//      val last = tr.exec(n)
//      for (i in 1L..last) {
//        if(i * i > last) break
//        if (last % i == 0L) {
//          list.add(i)
//        }
//      }
//      println(list)
//
//      count = list.size
//      res = list
//    }
//  }
//}


//fun main(args: Array<String>) {
//  val t = TripleNumber()
//
//  var len = 0L // 長さ
//  var n = 1L  // 番号
//  var last = 0L // 三角数（配列の最後の数）
//  var ans = mutableListOf<Long>()
//
//  while(len < 5) {
//    val divL = mutableListOf<Long>()
//    val resL = mutableListOf<Long>()
//
//    divL.add(t.exec(n))
//    last = divL.takeLast(1).first()
//    for(i in 1L..last){
//      if(i * i > last) break
//      if(last % i == 0L){
//        resL.add(i)
//      }
//    }
////    println(last)
//
//    len = resL.size.toLong()
//    ans = resL
//    n += 1L
//  }
//
//  println("数: $n")
//  println("数列: $ans")
//  println("三角数: $last")
//  println("長さ: $len")
//
//}

/**
 * Problem 13 大きな数の足し算
 *
 * 以下の50桁の数字100個の合計の上から10桁を求めなさい。
 *
 * 正解: 5537376230
 *
37107287533902102798797998220837590246510135740250
46376937677490009712648124896970078050417018260538
74324986199524741059474233309513058123726617309629
91942213363574161572522430563301811072406154908250
23067588207539346171171980310421047513778063246676
89261670696623633820136378418383684178734361726757
28112879812849979408065481931592621691275889832738
44274228917432520321923589422876796487670272189318
47451445736001306439091167216856844588711603153276
70386486105843025439939619828917593665686757934951
62176457141856560629502157223196586755079324193331
64906352462741904929101432445813822663347944758178
92575867718337217661963751590579239728245598838407
58203565325359399008402633568948830189458628227828
80181199384826282014278194139940567587151170094390
35398664372827112653829987240784473053190104293586
86515506006295864861532075273371959191420517255829
71693888707715466499115593487603532921714970056938
54370070576826684624621495650076471787294438377604
53282654108756828443191190634694037855217779295145
36123272525000296071075082563815656710885258350721
45876576172410976447339110607218265236877223636045
17423706905851860660448207621209813287860733969412
81142660418086830619328460811191061556940512689692
51934325451728388641918047049293215058642563049483
62467221648435076201727918039944693004732956340691
15732444386908125794514089057706229429197107928209
55037687525678773091862540744969844508330393682126
18336384825330154686196124348767681297534375946515
80386287592878490201521685554828717201219257766954
78182833757993103614740356856449095527097864797581
16726320100436897842553539920931837441497806860984
48403098129077791799088218795327364475675590848030
87086987551392711854517078544161852424320693150332
59959406895756536782107074926966537676326235447210
69793950679652694742597709739166693763042633987085
41052684708299085211399427365734116182760315001271
65378607361501080857009149939512557028198746004375
35829035317434717326932123578154982629742552737307
94953759765105305946966067683156574377167401875275
88902802571733229619176668713819931811048770190271
25267680276078003013678680992525463401061632866526
36270218540497705585629946580636237993140746255962
24074486908231174977792365466257246923322810917141
91430288197103288597806669760892938638285025333403
34413065578016127815921815005561868836468420090470
23053081172816430487623791969842487255036638784583
11487696932154902810424020138335124462181441773470
63783299490636259666498587618221225225512486764533
67720186971698544312419572409913959008952310058822
95548255300263520781532296796249481641953868218774
76085327132285723110424803456124867697064507995236
37774242535411291684276865538926205024910326572967
23701913275725675285653248258265463092207058596522
29798860272258331913126375147341994889534765745501
18495701454879288984856827726077713721403798879715
38298203783031473527721580348144513491373226651381
34829543829199918180278916522431027392251122869539
40957953066405232632538044100059654939159879593635
29746152185502371307642255121183693803580388584903
41698116222072977186158236678424689157993532961922
62467957194401269043877107275048102390895523597457
23189706772547915061505504953922979530901129967519
86188088225875314529584099251203829009407770775672
11306739708304724483816533873502340845647058077308
82959174767140363198008187129011875491310547126581
97623331044818386269515456334926366572897563400500
42846280183517070527831839425882145521227251250327
55121603546981200581762165212827652751691296897789
32238195734329339946437501907836945765883352399886
75506164965184775180738168837861091527357929701337
62177842752192623401942399639168044983993173312731
32924185707147349566916674687634660915035914677504
99518671430235219628894890102423325116913619626622
73267460800591547471830798392868535206946944540724
76841822524674417161514036427982273348055556214818
97142617910342598647204516893989422179826088076852
87783646182799346313767754307809363333018982642090
10848802521674670883215120185883543223812876952786
71329612474782464538636993009049310363619763878039
62184073572399794223406235393808339651327408011116
66627891981488087797941876876144230030984490851411
60661826293682836764744779239180335110989069790714
85786944089552990653640447425576083659976645795096
66024396409905389607120198219976047599490197230297
64913982680032973156037120041377903785566085089252
16730939319872750275468906903707539413042652315011
94809377245048795150954100921645863754710598436791
78639167021187492431995700641917969777599028300699
15368713711936614952811305876380278410754449733078
40789923115535562561142322423255033685442488917353
44889911501440648020369068063960672322193204149535
41503128880339536053299340368006977710650566631954
81234880673210146739058568557934581403627822703280
82616570773948327592232845941706525094512325230608
22918802058777319719839450180888072429661980811197
77158542502016545090413245809786882778948721859617
72107838435069186155435662884062257473692284509516
20849603980134001723930671666823555245252804609722
53503534226472524250874054075591789781264330331690
 */

//fun main(args: Array<String>) {
//  val str = "37107287533902102798797998220837590246510135740250\n" +
//    "46376937677490009712648124896970078050417018260538\n" +
//    "74324986199524741059474233309513058123726617309629\n" +
//    "91942213363574161572522430563301811072406154908250\n" +
//    "23067588207539346171171980310421047513778063246676\n" +
//    "89261670696623633820136378418383684178734361726757\n" +
//    "28112879812849979408065481931592621691275889832738\n" +
//    "44274228917432520321923589422876796487670272189318\n" +
//    "47451445736001306439091167216856844588711603153276\n" +
//    "70386486105843025439939619828917593665686757934951\n" +
//    "62176457141856560629502157223196586755079324193331\n" +
//    "64906352462741904929101432445813822663347944758178\n" +
//    "92575867718337217661963751590579239728245598838407\n" +
//    "58203565325359399008402633568948830189458628227828\n" +
//    "80181199384826282014278194139940567587151170094390\n" +
//    "35398664372827112653829987240784473053190104293586\n" +
//    "86515506006295864861532075273371959191420517255829\n" +
//    "71693888707715466499115593487603532921714970056938\n" +
//    "54370070576826684624621495650076471787294438377604\n" +
//    "53282654108756828443191190634694037855217779295145\n" +
//    "36123272525000296071075082563815656710885258350721\n" +
//    "45876576172410976447339110607218265236877223636045\n" +
//    "17423706905851860660448207621209813287860733969412\n" +
//    "81142660418086830619328460811191061556940512689692\n" +
//    "51934325451728388641918047049293215058642563049483\n" +
//    "62467221648435076201727918039944693004732956340691\n" +
//    "15732444386908125794514089057706229429197107928209\n" +
//    "55037687525678773091862540744969844508330393682126\n" +
//    "18336384825330154686196124348767681297534375946515\n" +
//    "80386287592878490201521685554828717201219257766954\n" +
//    "78182833757993103614740356856449095527097864797581\n" +
//    "16726320100436897842553539920931837441497806860984\n" +
//    "48403098129077791799088218795327364475675590848030\n" +
//    "87086987551392711854517078544161852424320693150332\n" +
//    "59959406895756536782107074926966537676326235447210\n" +
//    "69793950679652694742597709739166693763042633987085\n" +
//    "41052684708299085211399427365734116182760315001271\n" +
//    "65378607361501080857009149939512557028198746004375\n" +
//    "35829035317434717326932123578154982629742552737307\n" +
//    "94953759765105305946966067683156574377167401875275\n" +
//    "88902802571733229619176668713819931811048770190271\n" +
//    "25267680276078003013678680992525463401061632866526\n" +
//    "36270218540497705585629946580636237993140746255962\n" +
//    "24074486908231174977792365466257246923322810917141\n" +
//    "91430288197103288597806669760892938638285025333403\n" +
//    "34413065578016127815921815005561868836468420090470\n" +
//    "23053081172816430487623791969842487255036638784583\n" +
//    "11487696932154902810424020138335124462181441773470\n" +
//    "63783299490636259666498587618221225225512486764533\n" +
//    "67720186971698544312419572409913959008952310058822\n" +
//    "95548255300263520781532296796249481641953868218774\n" +
//    "76085327132285723110424803456124867697064507995236\n" +
//    "37774242535411291684276865538926205024910326572967\n" +
//    "23701913275725675285653248258265463092207058596522\n" +
//    "29798860272258331913126375147341994889534765745501\n" +
//    "18495701454879288984856827726077713721403798879715\n" +
//    "38298203783031473527721580348144513491373226651381\n" +
//    "34829543829199918180278916522431027392251122869539\n" +
//    "40957953066405232632538044100059654939159879593635\n" +
//    "29746152185502371307642255121183693803580388584903\n" +
//    "41698116222072977186158236678424689157993532961922\n" +
//    "62467957194401269043877107275048102390895523597457\n" +
//    "23189706772547915061505504953922979530901129967519\n" +
//    "86188088225875314529584099251203829009407770775672\n" +
//    "11306739708304724483816533873502340845647058077308\n" +
//    "82959174767140363198008187129011875491310547126581\n" +
//    "97623331044818386269515456334926366572897563400500\n" +
//    "42846280183517070527831839425882145521227251250327\n" +
//    "55121603546981200581762165212827652751691296897789\n" +
//    "32238195734329339946437501907836945765883352399886\n" +
//    "75506164965184775180738168837861091527357929701337\n" +
//    "62177842752192623401942399639168044983993173312731\n" +
//    "32924185707147349566916674687634660915035914677504\n" +
//    "99518671430235219628894890102423325116913619626622\n" +
//    "73267460800591547471830798392868535206946944540724\n" +
//    "76841822524674417161514036427982273348055556214818\n" +
//    "97142617910342598647204516893989422179826088076852\n" +
//    "87783646182799346313767754307809363333018982642090\n" +
//    "10848802521674670883215120185883543223812876952786\n" +
//    "71329612474782464538636993009049310363619763878039\n" +
//    "62184073572399794223406235393808339651327408011116\n" +
//    "66627891981488087797941876876144230030984490851411\n" +
//    "60661826293682836764744779239180335110989069790714\n" +
//    "85786944089552990653640447425576083659976645795096\n" +
//    "66024396409905389607120198219976047599490197230297\n" +
//    "64913982680032973156037120041377903785566085089252\n" +
//    "16730939319872750275468906903707539413042652315011\n" +
//    "94809377245048795150954100921645863754710598436791\n" +
//    "78639167021187492431995700641917969777599028300699\n" +
//    "15368713711936614952811305876380278410754449733078\n" +
//    "40789923115535562561142322423255033685442488917353\n" +
//    "44889911501440648020369068063960672322193204149535\n" +
//    "41503128880339536053299340368006977710650566631954\n" +
//    "81234880673210146739058568557934581403627822703280\n" +
//    "82616570773948327592232845941706525094512325230608\n" +
//    "22918802058777319719839450180888072429661980811197\n" +
//    "77158542502016545090413245809786882778948721859617\n" +
//    "72107838435069186155435662884062257473692284509516\n" +
//    "20849603980134001723930671666823555245252804609722\n" +
//    "53503534226472524250874054075591789781264330331690"
//
//  val list = str.split("\n")
//  val numList = list.map { BigDecimal(it) }
//  val res = numList.sum()
//  val ans = res.toString().substring(0, 10)
//
//  println("最初の10桁: $ans")
//}

/**
Problem 11 格子内の最大の積

20×20 の格子のうち, 斜めに並んだ4つの数字が赤くマークされている.

08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
それらの数字の積は 26 × 63 × 78 × 14 = 1788696 となる.

上の 20×20 の格子のうち, 上下左右斜めのいずれかの方向で連続する4つの数字の積のうち最大のものはいくつか?
 */
//fun main(args: Array<String>) {
//
//  val str = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n" +
//    "49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n" +
//    "81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n" +
//    "52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n" +
//    "22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n" +
//    "24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n" +
//    "32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\n" +
//    "67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\n" +
//    "24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\n" +
//    "21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n" +
//    "78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n" +
//    "16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n" +
//    "86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n" +
//    "19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n" +
//    "04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n" +
//    "88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n" +
//    "04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n" +
//    "20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n" +
//    "20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n" +
//    "01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"
//
//  val text = str.split("\n")                  // 改行で配列作成
//  val strList = text.map { it.split(" ") }    // 空白で配列作成 (これで二次元配列になる)
//  val numList = strList.map { it.map { it.toLong() } }  // StringからLongに型変更 (二次元配列)
//  val rowList = numList.map { row -> row.map { it } }   // 横列リストを作成 (二次元配列)
//
//  val list = numList.flatten()              // 二次元配列を全て平にする
//  val colList = mutableListOf<MutableList<Long>>()       // 縦配列のリスト準備
//  val axList = mutableListOf<MutableList<Long>>()        // 斜め配列のリスト準備
//
//  // 一列ずつずらしていくのを20回行う
//  for (c in 0..19) {                  // 20桁の場合
//    val li = mutableListOf<Long>()
//    for (i in 0..399 step 20) {       // 縦配列を作成 (20*20=400の場合)
//      li.add(list[i + c])             // ここでIndexは足す
//    }
//    colList.add(li)
//  }
//
//  // TODO 斜めの配列の求め方がわからない ><
//  val r = numList.mapIndexed { indexA, list ->
//    list[indexA]
//  }
//
//
//  val gr = Grid()
//  val hList = rowList.map { row ->
//    gr.calculate(row.toMutableList())
//  }.maxByOrNull { it }
//
//  val vList = colList.map { c ->
//    gr.calculate(c)
//  }.maxByOrNull { it }
//
//
//  println("横列毎の最大値リスト: $hList")
//  println("縦列毎の最大値リスト: $vList")
////  println("斜列毎の最大値リスト: $axList")
//
//
//}

/**
 * Problem 17 数字の文字数
 *
1 から 5 までの数字を英単語で書けば one, two, three, four, five であり, 全部で 3 + 3 + 5 + 4 + 4 = 19 の文字が使われている.

では 1 から 1000 (one thousand) までの数字をすべて英単語で書けば, 全部で何文字になるか.

注: 空白文字やハイフンを数えないこと.
例えば, 342 (three hundred and forty-two) は 23 文字, 115 (one hundred and fifteen) は20文字と数える.
なお, "and" を使用するのは英国の慣習.

正解: 21124

https://www.mathblog.dk/project-euler-17-letters-in-the-numbers-1-1000/

 */
//fun main(args: Array<String>) {
//
//  val n1to9 = listOf("one", "two", "three", "four", "five", "six", "seven", "eight", "nine")
//  val n10to19 = listOf("ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen")
//
//  val len1to9 = n1to9.joinToString("").length
//  val len10to19 = n10to19.joinToString("").length
//
//  println(len1to9)
//  println(len10to19)
//
//}

/**
 * Problem 19 日曜日の数え上げ

次の情報が与えられている.

1900年1月1日は月曜日である.
9月, 4月, 6月, 11月は30日まであり, 2月を除く他の月は31日まである.
2月は28日まであるが, うるう年のときは29日である.
うるう年は西暦が4で割り切れる年に起こる. しかし, 西暦が400で割り切れず100で割り切れる年はうるう年でない.
20世紀（1901年1月1日から2000年12月31日）中に月の初めが日曜日になるのは何回あるか?

 */
//fun main(args: Array<String>) {}

/**
Problem 21 友愛数

d(n) を n の真の約数の和と定義する. (真の約数とは n 以外の約数のことである. )
もし, d(a) = b かつ d(b) = a (a ≠ b のとき) を満たすとき, a と b は友愛数(親和数)であるという.

例えば, 220 の約数は 1, 2, 4, 5, 10, 11, 20, 22, 44, 55, 110 なので d(220) = 284 である.
また, 284 の約数は 1, 2, 4, 71, 142 なので d(284) = 220 である.

それでは10000未満の友愛数の和を求めよ.

正解: 31626

 */

//fun main(args: Array<String>) {
//
//  val am = Amicable()
//  var resList = mutableListOf<Pair<Long, Long>?>()
//
//  for (i in 1L..9999) {
//    resList.add(am.exec(i))
//  }
//
//  val list = resList.filterNotNull()
//  val ans = list.map { it.toList() }.flatten().sum()
//  println(list)
//  println(ans/2) // 重複しているので2で割る
//
//}

/**
 * Problem 24
 *
順列とはモノの順番付きの並びのことである. たとえば, 3124は数 1, 2, 3, 4 の一つの順列である. すべての順列を数の大小でまたは辞書式に並べたものを辞書順と呼ぶ. 0と1と2の順列を辞書順に並べると

012 021 102 120 201 210
になる.

0,1,2,3,4,5,6,7,8,9からなる順列を辞書式に並べたときの100万番目はいくつか?

正解: 2783915460
 */

//fun main(args: Array<String>) {
//
// val t = mutableListOf(0, 1, 2)
// val st = t.map { it.toString() }.joinToString("")
// val min = st.toLong()
// val max = st
//
// println(min)
// println(max)
//}

/**
 * 巡回素数
 *
 *
 */

//fun main() {
// var n = 1L
// var count = 0
// val primeNumber = PrimeNumber()
//
// //巡回素数かどうか確認する
// while (n < 1000000) {
//  //まずnが素数かどうか
//  if (primeNumber.isPrime(n)) {
//   val nums = mutableListOf<String>()
//   //素数だったら、回転させた数字も素数か調べる
//   val num = n.toString()
//   for (i in 1 until num.length) {
//    val r = num.substring(i) + num.take(i)
//    nums.add(r)
//   }
//   //すべて素数か？を判定
//   if (nums.all { primeNumber.isPrime(it.toLong()) }) {
//    count += 1
//   }
//  }
//  n += 1
// }
//
// println(count)
//}

//fun main(args: Array<String>) {
//  val test = BigInteger.ONE.shiftLeft(1000)
//  println(test)


//  val num = BigDecimal(7)
//  val r = num.pow(22)
//  val len = r.toString().length
//  val half = len / 2
//  val c = half -1
//  val t = r.toString().substring(half)
//
//  println(r)
//  println(t)

//}
